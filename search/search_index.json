{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\n\nA \nSublime Text\n plug-in to show information about files in a git repository:\n\n\n\n\nGutter Icons\n indicating inserted, modified or deleted lines\n\n\nDiff Popup\n with details about modified lines\n\n\nStatus Bar Text\n with information about file and repository\n\n\n\n\nand provides some commands like:\n\n\n\n\nGoto Change\n to navigate between modified lines\n\n\nCopy from Commit\n to copy the orignial content from the commit\n\n\nRevert to Commit\n to revert a modified hunk to the original state in a commit\n\n\n\n\nGutter Icons & Status Bar Text\n\n\n\n\nThe icons of the default theme have the following meaning:\n\n\n\n\n\n\n\n\nIcon\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\ninserted line\n\n\n\n\n\n\n\n\nmodified line\n\n\n\n\n\n\n\n\ndeleted region borders\n\n\n\n\n\n\n\n\nignored file\n\n\n\n\n\n\n\n\nuntracked file\n\n\n\n\n\n\n\n\nDiff Popup\n\n\nThe diff popup shows the orignal content from the commit or the differences between it and the working content.\n\n\n\u24d8 \nrequires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+\n\n\n\n\nThe toolbar provides some commands to interact with or modify the changes.\n\n\n\n\n\n\n\n\nsymbol\n\n\nmeaning of the symbol\n\n\n\n\n\n\n\n\n\n\n\u00d7\n\n\nclose the popup\n\n\n\n\n\n\n\u2912\n\n\ngoto to first change\n\n\n\n\n\n\n\u2191\n\n\ngoto to previous change\n\n\n\n\n\n\n\u2193\n\n\ngoto to next change\n\n\n\n\n\n\n\u2248, \u2249\n\n\nenable/disable difference highlighting\n\n\n\n\n\n\n\u2398\n\n\ncopy the orignial content from the commit\n\n\n\n\n\n\n\u27f2\n\n\nrevert a modified hunk to the original state in a commit\n\n\n\n\n\n\n\n\nTo learn about how to show the diff popup and to use those commands directly please refere to the \nBasic Usage\n section.",
            "title": "Overview"
        },
        {
            "location": "/#overview",
            "text": "A  Sublime Text  plug-in to show information about files in a git repository:   Gutter Icons  indicating inserted, modified or deleted lines  Diff Popup  with details about modified lines  Status Bar Text  with information about file and repository   and provides some commands like:   Goto Change  to navigate between modified lines  Copy from Commit  to copy the orignial content from the commit  Revert to Commit  to revert a modified hunk to the original state in a commit",
            "title": "Overview"
        },
        {
            "location": "/#gutter-icons-status-bar-text",
            "text": "The icons of the default theme have the following meaning:     Icon  Description       inserted line     modified line     deleted region borders     ignored file     untracked file",
            "title": "Gutter Icons &amp; Status Bar Text"
        },
        {
            "location": "/#diff-popup",
            "text": "The diff popup shows the orignal content from the commit or the differences between it and the working content.  \u24d8  requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+   The toolbar provides some commands to interact with or modify the changes.     symbol  meaning of the symbol      \u00d7  close the popup    \u2912  goto to first change    \u2191  goto to previous change    \u2193  goto to next change    \u2248, \u2249  enable/disable difference highlighting    \u2398  copy the orignial content from the commit    \u27f2  revert a modified hunk to the original state in a commit     To learn about how to show the diff popup and to use those commands directly please refere to the  Basic Usage  section.",
            "title": "Diff Popup"
        },
        {
            "location": "/install/",
            "text": "Installation\n\n\nPackage Control\n\n\nIt is highly recommended to install GitGutter with \nPackage Control\n as it automatically installs required \ndependencies\n and keeps all packages up to date.\n\n\n\n\nInstall Package Control\n if you haven't yet.\n\n\nOpen the command palette (\nCtrl+Shift+P\n for Windows/Linux, \nCmd+Shift+P\n for Mac OS)\n\n\nSearch for \nPackage Control: Install Package\n and hit \nEnter\n.\n\n\nType \nGitGutter\n and press \nEnter\n to install it.\n\n\n\n\nPre-Releases\n\n\nIf you are interested in testing bleeding edge features you can set up Package Control to install pre-releases by adding GitGutter to \ninstall_prereleases\n key in the \nPackage Control.sublime-settings\n.\n\n\n\"install_prereleases\"\n:\n\n\n[\n\n  \n\"GitGutter\"\n\n\n]\n,\n\n\n\n\n\nGitGutter-Edge\n\n\nThe \nGitGutter-Edge\n package is replaced by \nPre-Releases\n.\n\n\nThis change was made \u2026\n\n\n\n\nto avoid issues with functions which depend on the package name.\n\n\nbecause branch based packages are deprecated by Package Control.\n\n\nto have more control about when to publish new features for testing.\n\n\n\n\n\n\nTip\n\n\nIf you don't want to wait for \nPre-Releases\n you can pull from master branch directly.\n\n\n\n\nManual Installation\n\n\nYou can clone this repository into your \nSublime Text x/Packages\n\n\nMac OS\n\n\ncd\n ~/Library/Application\n\\ \nSupport/Sublime\n\\ \nText\n\\ \n3/Packages/\ngit clone git://github.com/jisaacks/GitGutter.git\n\n\n\n\nLinux\n\n\ncd\n ~/.config/sublime-text-3/Packages\ngit clone git://github.com/jisaacks/GitGutter.git\n\n\n\n\nWindows\n\n\ncd\n \n\"%APPDATA%\\Sublime Text 3\\Packages\"\n\ngit clone git://github.com/jisaacks/GitGutter.git\n\n\n\n\n\n\nTips\n\n\nThe \ngit\n command must be available on the command line.\n\n\nYou may need to add the directory containing \ngit.exe\n to your \nPATH\n environment variable.\n\n\n\n\nDependencies\n\n\nSome functions of GitGutter depend on the following external libraries to work properly. They are installed automatically for you by Package Control, so normally don't need to care about. But on setups without Package Control you need to make sure they are installed and available in the global namespace of Sublime Text's python interpreter on your own.\n\n\n\n\nmarkupsafe\n\n\nmdpopups\n\n\npygments\n\n\npython-jinja2\n\n\npython-markdown\n\n\n\n\n\n\nMac OS\n\n\nOn Mac OS you might need to install the package \nSublimeFixMacPath\n if you are using Sublime Text 2 or one of the early Sublime Text 3 dev builds.\n\n\n\n\n\n\nManual Install\n\n\nTo manually install pull from the linked repos into ST's Packages folder.",
            "title": "Installation"
        },
        {
            "location": "/install/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/install/#package-control",
            "text": "It is highly recommended to install GitGutter with  Package Control  as it automatically installs required  dependencies  and keeps all packages up to date.   Install Package Control  if you haven't yet.  Open the command palette ( Ctrl+Shift+P  for Windows/Linux,  Cmd+Shift+P  for Mac OS)  Search for  Package Control: Install Package  and hit  Enter .  Type  GitGutter  and press  Enter  to install it.",
            "title": "Package Control"
        },
        {
            "location": "/install/#pre-releases",
            "text": "If you are interested in testing bleeding edge features you can set up Package Control to install pre-releases by adding GitGutter to  install_prereleases  key in the  Package Control.sublime-settings .  \"install_prereleases\" :  [ \n   \"GitGutter\"  ] ,",
            "title": "Pre-Releases"
        },
        {
            "location": "/install/#gitgutter-edge",
            "text": "The  GitGutter-Edge  package is replaced by  Pre-Releases .  This change was made \u2026   to avoid issues with functions which depend on the package name.  because branch based packages are deprecated by Package Control.  to have more control about when to publish new features for testing.    Tip  If you don't want to wait for  Pre-Releases  you can pull from master branch directly.",
            "title": "GitGutter-Edge"
        },
        {
            "location": "/install/#manual-installation",
            "text": "You can clone this repository into your  Sublime Text x/Packages",
            "title": "Manual Installation"
        },
        {
            "location": "/install/#mac-os",
            "text": "cd  ~/Library/Application \\  Support/Sublime \\  Text \\  3/Packages/\ngit clone git://github.com/jisaacks/GitGutter.git",
            "title": "Mac OS"
        },
        {
            "location": "/install/#linux",
            "text": "cd  ~/.config/sublime-text-3/Packages\ngit clone git://github.com/jisaacks/GitGutter.git",
            "title": "Linux"
        },
        {
            "location": "/install/#windows",
            "text": "cd   \"%APPDATA%\\Sublime Text 3\\Packages\" \ngit clone git://github.com/jisaacks/GitGutter.git   Tips  The  git  command must be available on the command line.  You may need to add the directory containing  git.exe  to your  PATH  environment variable.",
            "title": "Windows"
        },
        {
            "location": "/install/#dependencies",
            "text": "Some functions of GitGutter depend on the following external libraries to work properly. They are installed automatically for you by Package Control, so normally don't need to care about. But on setups without Package Control you need to make sure they are installed and available in the global namespace of Sublime Text's python interpreter on your own.   markupsafe  mdpopups  pygments  python-jinja2  python-markdown    Mac OS  On Mac OS you might need to install the package  SublimeFixMacPath  if you are using Sublime Text 2 or one of the early Sublime Text 3 dev builds.    Manual Install  To manually install pull from the linked repos into ST's Packages folder.",
            "title": "Dependencies"
        },
        {
            "location": "/usage/",
            "text": "Usage\n\n\nIn order to enable your favourite work flow all major functions GitGutter has to offer are available via\n\n\n\n\nMain Menu\n\n\nCommand Palette\n\n\nKey Bindings\n\n\n\n\n\n\nCommand Palette\n\n\n\n\nOpen the command palette via \nMain > Tools > Command Palette \u2026\n or key binding \nCtrl + Shift + P\n for Windows/Linux or \n\u2318 + \u21e7 + P\n for Mac OS\n\n\nStart typing \nGitGutter:\n\n\nSelect one of the listed commands with the keyboard and press \nEnter\n.\n\n\n\n\n\n\nDisable Evaluation\n\n\nGitGutter tries best it can to decide automatically \nwhen to keep quiet\n.\n\n\nTo manually disable GitGutter for a certain View use:\n\n\n\n\n\n\n\n\nControl\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMenu\n\n\nMain > View > GitGutter > Enabled for View\n\n\n\n\n\n\n\n\nCompare Against \u2026\n\n\nGitGutter compares the working copy against the HEAD commit of the checked out branch by default.\n\n\nTo temporarily change the compare target for the whole repository use:\n\n\n\n\n\n\n\n\nControl\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMenu\n\n\nMain > View > GitGutter > Compare Against \n<target>\n\n\n\n\n\n\nCommand Palette\n\n\nGitGutter: Compare Against \n<target>\n\n\n\n\n\n\nKey Bindings Linux/Windows\n\n\nCtrl + Shift + Alt + c, \n<key>\n\n\n\n\n\n\nKey Bindings OSX\n\n\n\u2318 + \u21e7 + \u2325 + c, \n<key>\n\n\n\n\n\n\n\n\nWhen using key bindings press one of the following keys after \nCtrl + Shift + Alt + c\n to change the compare target.\n\n\n\n\n\n\n\n\n<key>\n\n\n<target>\n\n\n\n\n\n\n\n\n\n\nh\n\n\nHEAD\n\n\n\n\n\n\nb\n\n\nbranch\n\n\n\n\n\n\nt\n\n\ntag\n\n\n\n\n\n\nc\n\n\ncommit\n\n\n\n\n\n\nf\n\n\nfile commit (\ncurrent file's history\n)\n\n\n\n\n\n\no\n\n\norigin (\n@{upstream}\n)\n\n\n\n\n\n\n\n\nShow Diff Popup\n\n\nThe \nDiff Popup\n appears by hovering the mouse over the gutter area of Sublime Text or can be called from command palette or via a key binding.\n\n\n\u24d8 \nrequires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+\n\n\n\n\n\n\n\n\nControl\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMouse\n\n\nHover the gutter area of a changed line\n\n\n\n\n\n\nMenu\n\n\nMain > View > GitGutter > Diff Popup\n\n\n\n\n\n\nCommand Palette\n\n\nGitGutter: Show Diff Popup\n\n\n\n\n\n\nKey Bindings Linux/Windows\n\n\nCtrl + Shift + Alt + c, Ctrl + D\n\n\n\n\n\n\nKey Bindings OSX\n\n\n\u2318 + \u21e7 + \u2325 + c, \u2318 + D\n\n\n\n\n\n\n\n\nGoto Change\n\n\nThe commands are used to quickly navigate between modifications.\n\n\nThe \n\"next_prev_change_wrap\"\n setting controls whether to continue at document boundaries or not.\n\n\nThe default step size of 1 can be customized by command arguments. You'd need to create your own custom key bindings to make use of it.\n\n\nPrevious Change\n\n\n\n\n\n\n\n\nControl\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMenu\n\n\nMain > Goto > Goto Previous Change\n\n\n\n\n\n\nCommand Palette\n\n\nGitGutter: Goto Previous Change\n\n\n\n\n\n\nDiff Popup\n\n\n\u2191\n toolbar button\n\n\n\n\n\n\nKey Bindings Linux/Windows\n\n\nCtrl + Shift + Alt + k\n\n\n\n\n\n\nKey Bindings OSX\n\n\n\u2318 + \u21e7 + \u2325 + k\n\n\n\n\n\n\n\n\nNext Change\n\n\n\n\n\n\n\n\nControl\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMenu\n\n\nMain > Goto > Goto Next Change\n\n\n\n\n\n\nCommand Palette\n\n\nGitGutter: Goto Next Change\n\n\n\n\n\n\nDiff Popup\n\n\n\u2193\n toolbar button\n\n\n\n\n\n\nKey Bindings Linux/Windows\n\n\nCtrl + Shift + Alt + j\n\n\n\n\n\n\nKey Bindings OSX\n\n\n\u2318 + \u21e7 + \u2325 + j\n\n\n\n\n\n\n\n\nCopy Content from Commit\n\n\nThe command copies the committed content of the changed hunk under the first cursor to the clipboard. The default key binding for this command is:\n\n\n\n\n\n\n\n\nControl\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMenu\n\n\nMain > Edit > Copy Content from Commit\n\n\n\n\n\n\nCommand Palette\n\n\nGitGutter: Copy Content from Commit\n\n\n\n\n\n\nDiff Popup\n\n\n\u2398\n toolbar button\n\n\n\n\n\n\nKey Bindings Linux/Windows\n\n\nCtrl + Shift + c\n\n\n\n\n\n\nKey Bindings OSX\n\n\n\u2318 + \u21e7 c\n\n\n\n\n\n\n\n\nRevert Change to Commit\n\n\nThe command reverts the text under the first cursor to the state in git. The default key binding for this command is:\n\n\n\n\n\n\n\n\nControl\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMenu\n\n\nMain > Edit > Revert Change to Commit\n\n\n\n\n\n\nCommand Palette\n\n\nGitGutter: Revert Change to Commit\n\n\n\n\n\n\nDiff Popup\n\n\n\u27f2\n toolbar button\n\n\n\n\n\n\nKey Bindings Linux/Windows\n\n\nCtrl + Shift + Alt + z\n\n\n\n\n\n\nKey Bindings OSX\n\n\n\u2318 + \u21e7 + \u2325 + z",
            "title": "Basic Usage"
        },
        {
            "location": "/usage/#usage",
            "text": "In order to enable your favourite work flow all major functions GitGutter has to offer are available via   Main Menu  Command Palette  Key Bindings    Command Palette   Open the command palette via  Main > Tools > Command Palette \u2026  or key binding  Ctrl + Shift + P  for Windows/Linux or  \u2318 + \u21e7 + P  for Mac OS  Start typing  GitGutter:  Select one of the listed commands with the keyboard and press  Enter .",
            "title": "Usage"
        },
        {
            "location": "/usage/#disable-evaluation",
            "text": "GitGutter tries best it can to decide automatically  when to keep quiet .  To manually disable GitGutter for a certain View use:     Control  Description      Menu  Main > View > GitGutter > Enabled for View",
            "title": "Disable Evaluation"
        },
        {
            "location": "/usage/#compare-against",
            "text": "GitGutter compares the working copy against the HEAD commit of the checked out branch by default.  To temporarily change the compare target for the whole repository use:     Control  Description      Menu  Main > View > GitGutter > Compare Against  <target>    Command Palette  GitGutter: Compare Against  <target>    Key Bindings Linux/Windows  Ctrl + Shift + Alt + c,  <key>    Key Bindings OSX  \u2318 + \u21e7 + \u2325 + c,  <key>     When using key bindings press one of the following keys after  Ctrl + Shift + Alt + c  to change the compare target.     <key>  <target>      h  HEAD    b  branch    t  tag    c  commit    f  file commit ( current file's history )    o  origin ( @{upstream} )",
            "title": "Compare Against ..."
        },
        {
            "location": "/usage/#show-diff-popup",
            "text": "The  Diff Popup  appears by hovering the mouse over the gutter area of Sublime Text or can be called from command palette or via a key binding.  \u24d8  requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+     Control  Description      Mouse  Hover the gutter area of a changed line    Menu  Main > View > GitGutter > Diff Popup    Command Palette  GitGutter: Show Diff Popup    Key Bindings Linux/Windows  Ctrl + Shift + Alt + c, Ctrl + D    Key Bindings OSX  \u2318 + \u21e7 + \u2325 + c, \u2318 + D",
            "title": "Show Diff Popup"
        },
        {
            "location": "/usage/#goto-change",
            "text": "The commands are used to quickly navigate between modifications.  The  \"next_prev_change_wrap\"  setting controls whether to continue at document boundaries or not.  The default step size of 1 can be customized by command arguments. You'd need to create your own custom key bindings to make use of it.",
            "title": "Goto Change"
        },
        {
            "location": "/usage/#previous-change",
            "text": "Control  Description      Menu  Main > Goto > Goto Previous Change    Command Palette  GitGutter: Goto Previous Change    Diff Popup  \u2191  toolbar button    Key Bindings Linux/Windows  Ctrl + Shift + Alt + k    Key Bindings OSX  \u2318 + \u21e7 + \u2325 + k",
            "title": "Previous Change"
        },
        {
            "location": "/usage/#next-change",
            "text": "Control  Description      Menu  Main > Goto > Goto Next Change    Command Palette  GitGutter: Goto Next Change    Diff Popup  \u2193  toolbar button    Key Bindings Linux/Windows  Ctrl + Shift + Alt + j    Key Bindings OSX  \u2318 + \u21e7 + \u2325 + j",
            "title": "Next Change"
        },
        {
            "location": "/usage/#copy-content-from-commit",
            "text": "The command copies the committed content of the changed hunk under the first cursor to the clipboard. The default key binding for this command is:     Control  Description      Menu  Main > Edit > Copy Content from Commit    Command Palette  GitGutter: Copy Content from Commit    Diff Popup  \u2398  toolbar button    Key Bindings Linux/Windows  Ctrl + Shift + c    Key Bindings OSX  \u2318 + \u21e7 c",
            "title": "Copy Content from Commit"
        },
        {
            "location": "/usage/#revert-change-to-commit",
            "text": "The command reverts the text under the first cursor to the state in git. The default key binding for this command is:     Control  Description      Menu  Main > Edit > Revert Change to Commit    Command Palette  GitGutter: Revert Change to Commit    Diff Popup  \u27f2  toolbar button    Key Bindings Linux/Windows  Ctrl + Shift + Alt + z    Key Bindings OSX  \u2318 + \u21e7 + \u2325 + z",
            "title": "Revert Change to Commit"
        },
        {
            "location": "/settings/",
            "text": "Settings\n\n\nPackage settings are accessed via Main Menu or Command Palette.\n\n\n\n\n\n\n\n\nControl\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMenu\n\n\nMain > Preferences > Package Settings > GitGutter\n\n\n\n\n\n\nCommand Palette\n\n\nPreferences: GitGutter Settings\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nDefault settings should not be modified, as they are overwritten when GitGutter updates. Copy the relevant settings into GitGutter's user settings file instead.\n\n\n\n\nSyntax, User, Project and View Settings\n\n\nAll GitGutter settings can be placed in any of \nSublime Text's settings files\n to provide syntax-, user-, project- or view-specific setups.\n\n\nThe setting keys found in the \nGitGutter.sublime-settings\n need to be prefixed using \ngit_gutter_\n to do that. Each of those settings overrides the value from the GitGutter.sublime-settings.\n\n\nTo modify GitGutter settings for an open Project just open \nProject\n > \nEdit Project\n menu and add the \nsettings\n key as shown.\n\n\n{\n\n    \n\"folders\"\n:\n\n    \n[\n\n        \n{\n\n            \n\"path\"\n:\n \n\"src\"\n\n        \n}\n\n    \n],\n\n    \n\"settings\"\n:\n\n    \n{\n\n        \n// git_binary is the only setting not being prefixed\n\n        \n\"git_binary\"\n:\n \n\"/path/to/project/specific/git\"\n\n\n        \n// git_gutter settings\n\n        \n\"git_gutter_live_mode\"\n:\n \nfalse\n,\n\n        \n\"git_gutter_ignore_whitespace\"\n:\n \n\"space\"\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nPreferences\n\n\nAll correctly prefixed settings can be placed into \nPreferences.sublime-settings\n instead of \nGitGutter.sublime-settings\n.\n\n\n\n\n\n\nPlugin-API\n\n\nSettings can be modified temporarily per view by calls like \nview.settings().set(\"git_gutter_enable\", False)\n\n\n\n\nGeneral\n\n\nEnable or Disable Evaluation\n\n\n\"git_gutter_enable\"\n:\n \ntrue\n\n\n\n\n\nGitGutter evaluates changes every time the file is loaded, saved, activated or modified by default. Set \nfalse\n to disable evaluation and hide all gutter icons, status message and minimap markers.\n\n\n\n\nCaution\n\n\nThis setting must be set as syntax- user- project- or view-specific setting! It is ignored when put into \nGitGutter.sublime-settings\n.\n\n\n\n\nGit Binary\n\n\n\"git_binary\"\n:\n \n\"\"\n\n\n\n\n\nGitGutter looks for the git binary in the \nPATH\n environment variable by default.\n\n\nThe setting can be used to\n\n\n\n\nspecify the path to a custom git installation which is not registered to \nPATH\n.\n\n\nrun git via \nW\nindows \nS\nubsystem for \nL\ninux (WSL) on Windows 10 by setting up a unix like path.\n\n\n\n\nThe value may be either a direct string to a git binary:\n\n\nWindows\n\n\n\"git_binary\"\n:\n \n\"E:\\\\Portable\\\\git\\\\bin\\\\git.exe\"\n\n\n\n\n\nLinux/OSX/WSL\n\n\n\"git_binary\"\n:\n \n\"/usr/bin/git\"\n\n\n\n\n\nor it may be a dictionary keyed off what sublime.platform() returns, so it may be customized on a per-platform basis:\n\n\n\"git_binary\"\n:\n \n{\n\n    \n\"default\"\n:\n \n\"\"\n,\n\n    \n\"linux\"\n:\n \n\"/usr/bin/git\"\n,\n\n    \n\"osx\"\n:\n  \n\"/usr/bin/git\"\n,\n\n    \n\"windows\"\n:\n \n\"C:/Program Files/Git/cmd/git.exe\"\n\n\n}\n\n\n\n\n\n\n\nTips\n\n\n\n\nIt is valid to use environment variables in the setting value, and they will be expanded appropriately.\n\n\nIn a POSIX environment you can run \nwhich git\n to find the path to git if it is in your path. On Windows, you can use \nwhere git\n to do the equivalent.\n\n\n\n\n\n\nEnvironment Variables\n\n\n\"env\"\n:\n \n{\n\n    \n\"GIT_OPTIONAL_LOCKS\"\n:\n \n0\n\n\n}\n\n\n\n\n\nWith the \n\"env\"\n dictionary custom environment variables can be passed to git. The values overwrite the global environment variables Sublime Text is running with.\n\n\n\n\nTips\n\n\n\n\nKeys with value \nNone\n are removed from the local environment.\n\n\nThe \n\"git_gutter_env\"\n defined per view or project hides the global \n\"env\"\n dictionary.\n\n\nMake sure to use the correct separator characters of your OS, if you manipulate the \n$PATH\n.\n\n\n\n\n\n\nCompare Against\n\n\n\"compare_against\"\n:\n \n\"HEAD\"\n\n\n\n\n\nGitGutter compares the content of the view against the HEAD of the checked out branch by default. To change this default behaviour the \ncompare_against\n setting can be changed to any tag, branch or commit hash git understands.\n\n\n\n\nTips\n\n\nThis setting is overridden by the \nCompare Against Command\n\n\n\n\nDiff Algorithm\n\n\n\"diff_algorithm\"\n:\n \n\"patience\"\n\n\n\n\n\nSet \ndiff_algorithm\n to one of the following values to change this behaviour.\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n\"default\"\n\n\nThe basic greedy diff algorithm. Currently, this is the default.\n\n\n\n\n\n\n\"minimal\"\n\n\nSpend extra time to make sure the smallest possible diff is produced.\n\n\n\n\n\n\n\"patience\"\n\n\nUse \"patience diff\" algorithm when generating patches.\n\n\n\n\n\n\n\"histogram\"\n\n\nThis algorithm extends the patience algorithm to \"support low-occurrence common elements\".\n\n\n\n\n\n\n\n\nIgnore Whitespace\n\n\n\"ignore_whitespace\"\n:\n \n\"none\"\n\n\n\n\n\nGitGutter includes all whitespace when evaluating modifications by default. Set \nignore_whitespace\n to one of the following values to change this behaviour.\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n\"none\"\n\n\ndon't ignore any whitespace changes\n\n\n\n\n\n\n\"eol\"\n\n\nignore whitespace changes at the end of line\n\n\n\n\n\n\n\"space\"\n\n\nignore changed amount of whitespace\n\n\n\n\n\n\n\"all\"\n\n\nignore all whitespace\n\n\n\n\n\n\n\n\nDiff Gutter\n\n\nDebounce Delay\n\n\n\"debounce_delay\"\n:\n \n1000\n\n\n\n\n\nDelays update of gutter icons by the following amount (in milliseconds). Useful for performance issues. Default 1000 (1 second).\n\n\nFocus Change Mode\n\n\n\"focus_change_mode\"\n:\n \ntrue\n\n\n\n\n\nGitGutter evaluates changes every time a view gets the focus by default. Set \nfalse\n to disable evaluation when changing views.\n\n\n\n\nTips\n\n\nThis setting has effect with \n\"live_mode\": false\n only.\n\n\nGitGutter always evaluates changes after \nloading\n and \nsaving\n a document.\n\n\n\n\nLive Mode\n\n\n\"live_mode\"\n:\n \ntrue\n\n\n\n\n\nGitGutter evaluates changes every time the file is modified by default. Set \nfalse\n to disable evaluation after each input.\n\n\n\n\nTips\n\n\nGitGutter always evaluates changes after \nloading\n and \nsaving\n a document.\n\n\n\n\nProtected Regions\n\n\nTo avoid GitGutter from overriding more important gutter icons a list of protected regions can be created, which GitGutter won't add gutter icons to.\n\n\n\"protected_regions\"\n:\n \n[\n\n    \n\"sublimelinter-warning-gutter-marks\"\n,\n\n    \n\"sublimelinter-error-gutter-marks\"\n,\n\n    \n\"bookmarks\"\n\n\n]\n,\n\n\n\n\n\n\n\nTips\n\n\nYou will need to figure out the names of the regions to protect.\n\n\n\n\nShow Markers on Untracked Files\n\n\n\"show_markers_on_untracked_file\"\n:\n \ntrue\n\n\n\n\n\nGitGutter shows icons on each line for untracked and ignored files by default. Set to \nfalse\n to hide those icons.\n\n\n\n\nScopes\n\n\nYou may need to add scopes (\nmarkup.ignored.git_gutter\n and \nmarkup.untracked.git_gutter\n) to your color scheme to color the icons.\n\n\n\n\nShow Markers in Minimap\n\n\n\"show_in_minimap\"\n:\n \n1\n\n\n\n\n\nGitGutter shows diffs in the minimap on Sublime Text 3 by default. Change \nshow_in_minimap\n to one of the following values to disable this feature or change the width of the markers.\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n=0\n\n\nhide markers\n\n\n\n\n\n\n>1\n\n\nwidth of markers\n\n\n\n\n\n\n-1\n\n\nhighlight full line\n\n\n\n\n\n\n\n\nThemes\n\n\n\"theme\"\n:\n \n\"Default.gitgutter-theme\"\n\n\n\n\n\nGitGutter provides support for custom gutter icons and diff popup style sheets coming with theme packages. Set \ntheme\n to a valid theme file name to activate a different icon set.\n\n\nGitGutter includes following themes:\n\n\n\n\nBars.gitgutter-theme\n\n\nBars Thin.gitgutter-theme\n\n\nDefault.gitgutter-theme\n\n\nDefault HiDPI.gitgutter-theme (\nfor ST2 and old ST3 dev builds\n)\n\n\n\n\n\n\nCustom Themes\n\n\nTo provide a custom theme developers need to add a folder with all required icons and optionally a \ngitgutter_popup.css\n file to their package. An empty JSON file \n<ThemeName>.gitgutter-theme\n must exist to mark this folder a resource for GitGutter icons.\n\n\n\n\nDiff Popup\n\n\n\u24d8 \nrequires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+\n\n\nEnable Hover\n\n\n\"enable_hover_diff_popup\"\n:\n \ntrue\n\n\n\n\n\nGitGutter shows a diff popup, when hovering over changes in the gutter. Set \nfalse\n to disable the hovering feature.\n\n\n\n\nTips\n\n\nYou can still open it with a \nkey binding or command palette\n.\n\n\n\n\nDefault Mode\n\n\n\"diff_popup_default_mode\"\n:\n \n\"default\"\n\n\n\n\n\nThe popup displays the previous state of the content under the cursor by \n\"default\"\n but can be set to \n\"diff\"\n to highlight the differences between the git state and the editor state.\n\n\nProtected Regions\n\n\n\"diff_popup_protected_regions\"\n:\n \n[\n\n    \n\"sublime_linter.protected_regions\"\n\n\n]\n,\n\n\n\n\n\nTo avoid GitGutter's diff popup from figting with other popups while hovering the gutter a list of protected regions can be created. If the line under the mouse cursor is occupied by one of these regions, no diff popup is displayed.\n\n\n\n\nTips\n\n\n\n\n\n\nYou will need to figure out the names of the regions to protect.\n\n\n\n\n\n\nYou can still open it with a \nkey binding or command palette\n.\n\n\n\n\n\n\n\n\nStylesheet\n\n\nThe default style of the \nDiff Popup\n is defined by \nmdpopups\n\u00b4s \ndefault.css\n and GitGutter\u00b4s \ngitgutter_popup.css\n. Both try their best to adapt the popup\u00b4s apeareance to the active color scheme automatically.\n\n\nThe apeareance can be customized by\n\n\n\n\nan embedded stylesheet in the color scheme\n\n\nediting the \nPackages/User/mdpopups.css\n\n\nediting the \nPackages/User/gitgutter_popup.css\n\n\n\n\n\n\nEdit gitgutter_popup.css\n\n\nGitGutter\u00b4s style settings are accessible via\n\n\n\n\n\n\nMenu:\n Main > Preferences > Package Settings > GitGutter > Popup Stylesheet\n\n\n\n\n\n\nCommand Palette\n: Preferences: GitGutter Popup Stylesheet\n\n\n\n\n\n\n\n\nSyntax Highlighting\n\n\nThe popup uses the \nmdpopups\n library to render its content, which includes syntax highlighting.\n\n\nPlease refer to \nmdpopups settings documentation\n for settings to change this behaviour.\n\n\nStatus Bar Text\n\n\nShow Status Bar Text\n\n\n\"show_status_bar_text\"\n:\n \ntrue\n\n\n\n\n\nGitGutter displays status information about open files in the status bar by default. Set to \nfalse\n to hide the information.\n\n\nStatus Bar Text Template\n\n\n\"status_bar_text\"\n:\n \n[\n\n    \n\"{% if repo and branch %}\"\n,\n\n    \n\"{{repo}}/{{branch}}\"\n,\n\n    \n\"{% if added_files + deleted_files + modified_files > 0 %}*{% endif %}\"\n,\n\n    \n\"{% if compare not in ('HEAD', branch, None) %}, Comparing against {{compare}}{% endif %}\"\n,\n\n    \n\"{% if state %}, File is {{state}}{% endif %}\"\n,\n\n    \n\"{% if deleted > 0 %}, {{deleted}}-{% endif %}\"\n,\n\n    \n\"{% if inserted > 0 %}, {{inserted}}+{% endif %}\"\n,\n\n    \n\"{% if modified > 0 %}, {{modified}}\u2260{% endif %}\"\n,\n\n    \n\"{% endif %}\"\n\n\n]\n\n\n\n\n\nThe \nStatus Bar Text\n is rendered using a fully customizable template from \nstatus_bar_text\n. The setting is organized as an array of strings for better readability. It is joined and then passed to \njinja2\n.\n\n\n\n\ndisable jinja2\n\n\nSet \n\"line_annotation_text\": null\n to disable \njinja2\n engine.\n\n\nThe message is formatted with a fixed template which is also used if \njinja2\n is not available.\n\n\n\n\nThe following variables can be used to customize the template:\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n{{repo}}\n\n\nrepository name / folder name containing the .git directory\n\n\n\n\n\n\n{{branch}}\n\n\nchecked out branch you are working on\n\n\n\n\n\n\n{{remote}}\n\n\ntracked remote of current branch you are working on or \nNone\n\n\n\n\n\n\n{{ahead}}\n\n\nnumber of commits the local branch is ahead of remote\n\n\n\n\n\n\n{{behind}}\n\n\nnumber of commits the local branch is behind remote\n\n\n\n\n\n\n{{added_files}}\n\n\nnumber of untracked files added to working tree\n\n\n\n\n\n\n{{deleted_files}}\n\n\nnumber of files deleted from working tree\n\n\n\n\n\n\n{{modified_files}}\n\n\nnumber of modified files in the working tree\n\n\n\n\n\n\n{{staged_files}}\n\n\nnumber of files in the staging area\n\n\n\n\n\n\n{{compare}}\n\n\ncommit/branch/HEAD the file is compared to\n\n\n\n\n\n\n{{state}}\n\n\nOne of committed/modified/ignored/untracked\n\n\n\n\n\n\n{{deleted}}\n\n\nnumber of deleted regions\n\n\n\n\n\n\n{{inserted}}\n\n\nnumber of inserted lines\n\n\n\n\n\n\n{{modified}}\n\n\nnumber of modified lines",
            "title": "Settings"
        },
        {
            "location": "/settings/#settings",
            "text": "Package settings are accessed via Main Menu or Command Palette.     Control  Description      Menu  Main > Preferences > Package Settings > GitGutter    Command Palette  Preferences: GitGutter Settings      Warning  Default settings should not be modified, as they are overwritten when GitGutter updates. Copy the relevant settings into GitGutter's user settings file instead.",
            "title": "Settings"
        },
        {
            "location": "/settings/#syntax-user-project-and-view-settings",
            "text": "All GitGutter settings can be placed in any of  Sublime Text's settings files  to provide syntax-, user-, project- or view-specific setups.  The setting keys found in the  GitGutter.sublime-settings  need to be prefixed using  git_gutter_  to do that. Each of those settings overrides the value from the GitGutter.sublime-settings.  To modify GitGutter settings for an open Project just open  Project  >  Edit Project  menu and add the  settings  key as shown.  { \n     \"folders\" : \n     [ \n         { \n             \"path\" :   \"src\" \n         } \n     ], \n     \"settings\" : \n     { \n         // git_binary is the only setting not being prefixed \n         \"git_binary\" :   \"/path/to/project/specific/git\" \n\n         // git_gutter settings \n         \"git_gutter_live_mode\" :   false , \n         \"git_gutter_ignore_whitespace\" :   \"space\" \n     }  }    Preferences  All correctly prefixed settings can be placed into  Preferences.sublime-settings  instead of  GitGutter.sublime-settings .    Plugin-API  Settings can be modified temporarily per view by calls like  view.settings().set(\"git_gutter_enable\", False)",
            "title": "Syntax, User, Project and View Settings"
        },
        {
            "location": "/settings/#general",
            "text": "",
            "title": "General"
        },
        {
            "location": "/settings/#enable-or-disable-evaluation",
            "text": "\"git_gutter_enable\" :   true   GitGutter evaluates changes every time the file is loaded, saved, activated or modified by default. Set  false  to disable evaluation and hide all gutter icons, status message and minimap markers.   Caution  This setting must be set as syntax- user- project- or view-specific setting! It is ignored when put into  GitGutter.sublime-settings .",
            "title": "Enable or Disable Evaluation"
        },
        {
            "location": "/settings/#git-binary",
            "text": "\"git_binary\" :   \"\"   GitGutter looks for the git binary in the  PATH  environment variable by default.  The setting can be used to   specify the path to a custom git installation which is not registered to  PATH .  run git via  W indows  S ubsystem for  L inux (WSL) on Windows 10 by setting up a unix like path.   The value may be either a direct string to a git binary:",
            "title": "Git Binary"
        },
        {
            "location": "/settings/#windows",
            "text": "\"git_binary\" :   \"E:\\\\Portable\\\\git\\\\bin\\\\git.exe\"",
            "title": "Windows"
        },
        {
            "location": "/settings/#linuxosxwsl",
            "text": "\"git_binary\" :   \"/usr/bin/git\"   or it may be a dictionary keyed off what sublime.platform() returns, so it may be customized on a per-platform basis:  \"git_binary\" :   { \n     \"default\" :   \"\" , \n     \"linux\" :   \"/usr/bin/git\" , \n     \"osx\" :    \"/usr/bin/git\" , \n     \"windows\" :   \"C:/Program Files/Git/cmd/git.exe\"  }    Tips   It is valid to use environment variables in the setting value, and they will be expanded appropriately.  In a POSIX environment you can run  which git  to find the path to git if it is in your path. On Windows, you can use  where git  to do the equivalent.",
            "title": "Linux/OSX/WSL"
        },
        {
            "location": "/settings/#environment-variables",
            "text": "\"env\" :   { \n     \"GIT_OPTIONAL_LOCKS\" :   0  }   With the  \"env\"  dictionary custom environment variables can be passed to git. The values overwrite the global environment variables Sublime Text is running with.   Tips   Keys with value  None  are removed from the local environment.  The  \"git_gutter_env\"  defined per view or project hides the global  \"env\"  dictionary.  Make sure to use the correct separator characters of your OS, if you manipulate the  $PATH .",
            "title": "Environment Variables"
        },
        {
            "location": "/settings/#compare-against",
            "text": "\"compare_against\" :   \"HEAD\"   GitGutter compares the content of the view against the HEAD of the checked out branch by default. To change this default behaviour the  compare_against  setting can be changed to any tag, branch or commit hash git understands.   Tips  This setting is overridden by the  Compare Against Command",
            "title": "Compare Against"
        },
        {
            "location": "/settings/#diff-algorithm",
            "text": "\"diff_algorithm\" :   \"patience\"   Set  diff_algorithm  to one of the following values to change this behaviour.     value  description      \"default\"  The basic greedy diff algorithm. Currently, this is the default.    \"minimal\"  Spend extra time to make sure the smallest possible diff is produced.    \"patience\"  Use \"patience diff\" algorithm when generating patches.    \"histogram\"  This algorithm extends the patience algorithm to \"support low-occurrence common elements\".",
            "title": "Diff Algorithm"
        },
        {
            "location": "/settings/#ignore-whitespace",
            "text": "\"ignore_whitespace\" :   \"none\"   GitGutter includes all whitespace when evaluating modifications by default. Set  ignore_whitespace  to one of the following values to change this behaviour.     value  description      \"none\"  don't ignore any whitespace changes    \"eol\"  ignore whitespace changes at the end of line    \"space\"  ignore changed amount of whitespace    \"all\"  ignore all whitespace",
            "title": "Ignore Whitespace"
        },
        {
            "location": "/settings/#diff-gutter",
            "text": "",
            "title": "Diff Gutter"
        },
        {
            "location": "/settings/#debounce-delay",
            "text": "\"debounce_delay\" :   1000   Delays update of gutter icons by the following amount (in milliseconds). Useful for performance issues. Default 1000 (1 second).",
            "title": "Debounce Delay"
        },
        {
            "location": "/settings/#focus-change-mode",
            "text": "\"focus_change_mode\" :   true   GitGutter evaluates changes every time a view gets the focus by default. Set  false  to disable evaluation when changing views.   Tips  This setting has effect with  \"live_mode\": false  only.  GitGutter always evaluates changes after  loading  and  saving  a document.",
            "title": "Focus Change Mode"
        },
        {
            "location": "/settings/#live-mode",
            "text": "\"live_mode\" :   true   GitGutter evaluates changes every time the file is modified by default. Set  false  to disable evaluation after each input.   Tips  GitGutter always evaluates changes after  loading  and  saving  a document.",
            "title": "Live Mode"
        },
        {
            "location": "/settings/#protected-regions",
            "text": "To avoid GitGutter from overriding more important gutter icons a list of protected regions can be created, which GitGutter won't add gutter icons to.  \"protected_regions\" :   [ \n     \"sublimelinter-warning-gutter-marks\" , \n     \"sublimelinter-error-gutter-marks\" , \n     \"bookmarks\"  ] ,    Tips  You will need to figure out the names of the regions to protect.",
            "title": "Protected Regions"
        },
        {
            "location": "/settings/#show-markers-on-untracked-files",
            "text": "\"show_markers_on_untracked_file\" :   true   GitGutter shows icons on each line for untracked and ignored files by default. Set to  false  to hide those icons.   Scopes  You may need to add scopes ( markup.ignored.git_gutter  and  markup.untracked.git_gutter ) to your color scheme to color the icons.",
            "title": "Show Markers on Untracked Files"
        },
        {
            "location": "/settings/#show-markers-in-minimap",
            "text": "\"show_in_minimap\" :   1   GitGutter shows diffs in the minimap on Sublime Text 3 by default. Change  show_in_minimap  to one of the following values to disable this feature or change the width of the markers.     value  description      =0  hide markers    >1  width of markers    -1  highlight full line",
            "title": "Show Markers in Minimap"
        },
        {
            "location": "/settings/#themes",
            "text": "\"theme\" :   \"Default.gitgutter-theme\"   GitGutter provides support for custom gutter icons and diff popup style sheets coming with theme packages. Set  theme  to a valid theme file name to activate a different icon set.  GitGutter includes following themes:   Bars.gitgutter-theme  Bars Thin.gitgutter-theme  Default.gitgutter-theme  Default HiDPI.gitgutter-theme ( for ST2 and old ST3 dev builds )    Custom Themes  To provide a custom theme developers need to add a folder with all required icons and optionally a  gitgutter_popup.css  file to their package. An empty JSON file  <ThemeName>.gitgutter-theme  must exist to mark this folder a resource for GitGutter icons.",
            "title": "Themes"
        },
        {
            "location": "/settings/#diff-popup",
            "text": "\u24d8  requires Sublime Text 3 Build 3124+ and mdpopups 2.0.0+",
            "title": "Diff Popup"
        },
        {
            "location": "/settings/#enable-hover",
            "text": "\"enable_hover_diff_popup\" :   true   GitGutter shows a diff popup, when hovering over changes in the gutter. Set  false  to disable the hovering feature.   Tips  You can still open it with a  key binding or command palette .",
            "title": "Enable Hover"
        },
        {
            "location": "/settings/#default-mode",
            "text": "\"diff_popup_default_mode\" :   \"default\"   The popup displays the previous state of the content under the cursor by  \"default\"  but can be set to  \"diff\"  to highlight the differences between the git state and the editor state.",
            "title": "Default Mode"
        },
        {
            "location": "/settings/#protected-regions_1",
            "text": "\"diff_popup_protected_regions\" :   [ \n     \"sublime_linter.protected_regions\"  ] ,   To avoid GitGutter's diff popup from figting with other popups while hovering the gutter a list of protected regions can be created. If the line under the mouse cursor is occupied by one of these regions, no diff popup is displayed.   Tips    You will need to figure out the names of the regions to protect.    You can still open it with a  key binding or command palette .",
            "title": "Protected Regions"
        },
        {
            "location": "/settings/#stylesheet",
            "text": "The default style of the  Diff Popup  is defined by  mdpopups \u00b4s  default.css  and GitGutter\u00b4s  gitgutter_popup.css . Both try their best to adapt the popup\u00b4s apeareance to the active color scheme automatically.  The apeareance can be customized by   an embedded stylesheet in the color scheme  editing the  Packages/User/mdpopups.css  editing the  Packages/User/gitgutter_popup.css    Edit gitgutter_popup.css  GitGutter\u00b4s style settings are accessible via    Menu:  Main > Preferences > Package Settings > GitGutter > Popup Stylesheet    Command Palette : Preferences: GitGutter Popup Stylesheet",
            "title": "Stylesheet"
        },
        {
            "location": "/settings/#syntax-highlighting",
            "text": "The popup uses the  mdpopups  library to render its content, which includes syntax highlighting.  Please refer to  mdpopups settings documentation  for settings to change this behaviour.",
            "title": "Syntax Highlighting"
        },
        {
            "location": "/settings/#status-bar-text",
            "text": "",
            "title": "Status Bar Text"
        },
        {
            "location": "/settings/#show-status-bar-text",
            "text": "\"show_status_bar_text\" :   true   GitGutter displays status information about open files in the status bar by default. Set to  false  to hide the information.",
            "title": "Show Status Bar Text"
        },
        {
            "location": "/settings/#status-bar-text-template",
            "text": "\"status_bar_text\" :   [ \n     \"{% if repo and branch %}\" , \n     \"{{repo}}/{{branch}}\" , \n     \"{% if added_files + deleted_files + modified_files > 0 %}*{% endif %}\" , \n     \"{% if compare not in ('HEAD', branch, None) %}, Comparing against {{compare}}{% endif %}\" , \n     \"{% if state %}, File is {{state}}{% endif %}\" , \n     \"{% if deleted > 0 %}, {{deleted}}-{% endif %}\" , \n     \"{% if inserted > 0 %}, {{inserted}}+{% endif %}\" , \n     \"{% if modified > 0 %}, {{modified}}\u2260{% endif %}\" , \n     \"{% endif %}\"  ]   The  Status Bar Text  is rendered using a fully customizable template from  status_bar_text . The setting is organized as an array of strings for better readability. It is joined and then passed to  jinja2 .   disable jinja2  Set  \"line_annotation_text\": null  to disable  jinja2  engine.  The message is formatted with a fixed template which is also used if  jinja2  is not available.   The following variables can be used to customize the template:     Variable  Description      {{repo}}  repository name / folder name containing the .git directory    {{branch}}  checked out branch you are working on    {{remote}}  tracked remote of current branch you are working on or  None    {{ahead}}  number of commits the local branch is ahead of remote    {{behind}}  number of commits the local branch is behind remote    {{added_files}}  number of untracked files added to working tree    {{deleted_files}}  number of files deleted from working tree    {{modified_files}}  number of modified files in the working tree    {{staged_files}}  number of files in the staging area    {{compare}}  commit/branch/HEAD the file is compared to    {{state}}  One of committed/modified/ignored/untracked    {{deleted}}  number of deleted regions    {{inserted}}  number of inserted lines    {{modified}}  number of modified lines",
            "title": "Status Bar Text Template"
        },
        {
            "location": "/coloring/",
            "text": "Icon Coloring\n\n\nThe colors come from your \ncolor scheme\n file.\n\n\nSublime Text Color Scheme Format\n\n\n<Name>.sublime-color-scheme\n\n\n\u24d8 \nrequires Sublime Text 3 Build 3152+\n\n\nIf a color scheme file does not define the appropriate colors (or you want to edit them) \u2026\n\n\n\n\nCreate a \nPackages/User/\n<Name>\n.sublime-color-scheme\n file.\n\n\nCopy and paste the following rules into that file.\n\n\nSet \n\"color_scheme\"\n user setting to \n<Name>\n.sublime-color-scheme\n.\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nStep 3\n can be ommitted if the overridden color scheme is a \n*.sublime-color-scheme\n file.\n\n\n\n\n\n\nSublime Text's \nUI: Select Color Scheme\n command can be used to activate the color scheme.\n\n\n\n\n\n\nIf \nUI: Select Color Scheme\n is not available or the overridden color scheme is of the old \n*.tmTheme\n format use \nTheme Menu Switcher\n to select the \nPackages/User/\n<Name>\n.sublime-color-scheme\n.\n\n\n\n\n\n\n\n\nUser Defined Color Scheme\n\n\n{\n\n    \n\"rules\"\n:\n\n    \n[\n\n        \n{\n\n            \n\"scope\"\n:\n \n\"markup.deleted.git_gutter\"\n,\n\n            \n\"foreground\"\n:\n \n\"#F92672\"\n\n        \n},\n\n        \n{\n\n            \n\"scope\"\n:\n \n\"markup.changed.git_gutter\"\n,\n\n            \n\"foreground\"\n:\n \n\"#967EFB\"\n\n        \n},\n\n        \n{\n\n            \n\"scope\"\n:\n \n\"markup.inserted.git_gutter\"\n,\n\n            \n\"foreground\"\n:\n \n\"#A6E22E\"\n\n        \n},\n\n        \n{\n\n            \n\"scope\"\n:\n \n\"markup.ignored.git_gutter\"\n,\n\n            \n\"foreground\"\n:\n \n\"#565656\"\n\n        \n},\n\n        \n{\n\n            \n\"scope\"\n:\n \n\"markup.untracked.git_gutter\"\n,\n\n            \n\"foreground\"\n:\n \n\"#565656\"\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nTextMate Color Scheme Format\n\n\n<Name>.tmTheme\n\n\n\u24d8 \nrequired for Sublime Text 2 or Sublime Text 3 before Build 3151\n\n\nIf a color scheme file does not define the appropriate colors (or you want to edit them) \u2026\n\n\n\n\nCopy the original color scheme to \nPackages/User/\n<Name>\n.tmTheme\n.\n\n\nAdd and modify the \nrequired color scheme entries\n listed below.\n\n\nSet \n\"color_scheme\"\n user setting to the modified file or use \nTheme Menu Switcher\n to activate it.\n\n\n\n\n\n\nCaution\n\n\nThe duplicated user file will override any updates of the original color scheme. Therefore it is recommended to use \nSublime Text Color Scheme\n format if possible.\n\n\n\n\nRequired Color Scheme Entries\n\n\n<dict>\n\n  \n<key>\nname\n</key>\n\n  \n<string>\nGitGutter deleted\n</string>\n\n  \n<key>\nscope\n</key>\n\n  \n<string>\nmarkup.deleted.git_gutter\n</string>\n\n  \n<key>\nsettings\n</key>\n\n  \n<dict>\n\n    \n<key>\nforeground\n</key>\n\n    \n<string>\n#F92672\n</string>\n\n  \n</dict>\n\n\n</dict>\n\n\n<dict>\n\n  \n<key>\nname\n</key>\n\n  \n<string>\nGitGutter inserted\n</string>\n\n  \n<key>\nscope\n</key>\n\n  \n<string>\nmarkup.inserted.git_gutter\n</string>\n\n  \n<key>\nsettings\n</key>\n\n  \n<dict>\n\n    \n<key>\nforeground\n</key>\n\n    \n<string>\n#A6E22E\n</string>\n\n  \n</dict>\n\n\n</dict>\n\n\n<dict>\n\n  \n<key>\nname\n</key>\n\n  \n<string>\nGitGutter changed\n</string>\n\n  \n<key>\nscope\n</key>\n\n  \n<string>\nmarkup.changed.git_gutter\n</string>\n\n  \n<key>\nsettings\n</key>\n\n  \n<dict>\n\n    \n<key>\nforeground\n</key>\n\n    \n<string>\n#967EFB\n</string>\n\n  \n</dict>\n\n\n</dict>\n\n\n<dict>\n\n  \n<key>\nname\n</key>\n\n  \n<string>\nGitGutter ignored\n</string>\n\n  \n<key>\nscope\n</key>\n\n  \n<string>\nmarkup.ignored.git_gutter\n</string>\n\n  \n<key>\nsettings\n</key>\n\n  \n<dict>\n\n    \n<key>\nforeground\n</key>\n\n    \n<string>\n#565656\n</string>\n\n  \n</dict>\n\n\n</dict>\n\n\n<dict>\n\n  \n<key>\nname\n</key>\n\n  \n<string>\nGitGutter untracked\n</string>\n\n  \n<key>\nscope\n</key>\n\n  \n<string>\nmarkup.untracked.git_gutter\n</string>\n\n  \n<key>\nsettings\n</key>\n\n  \n<dict>\n\n    \n<key>\nforeground\n</key>\n\n    \n<string>\n#565656\n</string>\n\n  \n</dict>\n\n\n</dict>\n\n\n\n\n\nSupported Color Schemes\n\n\nColor schemes that already have support for GitGutter include:\n\n\n\n\nAfterglow\n\n\nBaara Dark\n\n\nBoxy Theme\n\n\nBrackets Color Scheme\n\n\nCobalt2\n\n\nDark Room\n\n\nDeep Blue See\n\n\nDesert Night\n\n\nFlatland\n\n\nFox\n\n\nGrandson of Obsidian\n\n\nHitoshi\n\n\nMonokai Extended\n\n\nMonokai Pro\n\n\nNeon Color Scheme\n\n\nNeon\n\n\nOblivion\n\n\nPerv\n\n\nSolarized Colour Theme\n\n\nSpacegray\n\n\nSpecials Board\n\n\nTomorrow Theme\n\n\nUnderscore Colour Theme\n\n\nWildlife\n\n\nContact me if you want your color scheme listed here. Or do a pull request.",
            "title": "Coloring"
        },
        {
            "location": "/coloring/#icon-coloring",
            "text": "The colors come from your  color scheme  file.",
            "title": "Icon Coloring"
        },
        {
            "location": "/coloring/#sublime-text-color-scheme-format",
            "text": "<Name>.sublime-color-scheme  \u24d8  requires Sublime Text 3 Build 3152+  If a color scheme file does not define the appropriate colors (or you want to edit them) \u2026   Create a  Packages/User/ <Name> .sublime-color-scheme  file.  Copy and paste the following rules into that file.  Set  \"color_scheme\"  user setting to  <Name> .sublime-color-scheme .    Tip    Step 3  can be ommitted if the overridden color scheme is a  *.sublime-color-scheme  file.    Sublime Text's  UI: Select Color Scheme  command can be used to activate the color scheme.    If  UI: Select Color Scheme  is not available or the overridden color scheme is of the old  *.tmTheme  format use  Theme Menu Switcher  to select the  Packages/User/ <Name> .sublime-color-scheme .",
            "title": "Sublime Text Color Scheme Format"
        },
        {
            "location": "/coloring/#user-defined-color-scheme",
            "text": "{ \n     \"rules\" : \n     [ \n         { \n             \"scope\" :   \"markup.deleted.git_gutter\" , \n             \"foreground\" :   \"#F92672\" \n         }, \n         { \n             \"scope\" :   \"markup.changed.git_gutter\" , \n             \"foreground\" :   \"#967EFB\" \n         }, \n         { \n             \"scope\" :   \"markup.inserted.git_gutter\" , \n             \"foreground\" :   \"#A6E22E\" \n         }, \n         { \n             \"scope\" :   \"markup.ignored.git_gutter\" , \n             \"foreground\" :   \"#565656\" \n         }, \n         { \n             \"scope\" :   \"markup.untracked.git_gutter\" , \n             \"foreground\" :   \"#565656\" \n         } \n     ]  }",
            "title": "User Defined Color Scheme"
        },
        {
            "location": "/coloring/#textmate-color-scheme-format",
            "text": "<Name>.tmTheme  \u24d8  required for Sublime Text 2 or Sublime Text 3 before Build 3151  If a color scheme file does not define the appropriate colors (or you want to edit them) \u2026   Copy the original color scheme to  Packages/User/ <Name> .tmTheme .  Add and modify the  required color scheme entries  listed below.  Set  \"color_scheme\"  user setting to the modified file or use  Theme Menu Switcher  to activate it.    Caution  The duplicated user file will override any updates of the original color scheme. Therefore it is recommended to use  Sublime Text Color Scheme  format if possible.",
            "title": "TextMate Color Scheme Format"
        },
        {
            "location": "/coloring/#required-color-scheme-entries",
            "text": "<dict> \n   <key> name </key> \n   <string> GitGutter deleted </string> \n   <key> scope </key> \n   <string> markup.deleted.git_gutter </string> \n   <key> settings </key> \n   <dict> \n     <key> foreground </key> \n     <string> #F92672 </string> \n   </dict>  </dict>  <dict> \n   <key> name </key> \n   <string> GitGutter inserted </string> \n   <key> scope </key> \n   <string> markup.inserted.git_gutter </string> \n   <key> settings </key> \n   <dict> \n     <key> foreground </key> \n     <string> #A6E22E </string> \n   </dict>  </dict>  <dict> \n   <key> name </key> \n   <string> GitGutter changed </string> \n   <key> scope </key> \n   <string> markup.changed.git_gutter </string> \n   <key> settings </key> \n   <dict> \n     <key> foreground </key> \n     <string> #967EFB </string> \n   </dict>  </dict>  <dict> \n   <key> name </key> \n   <string> GitGutter ignored </string> \n   <key> scope </key> \n   <string> markup.ignored.git_gutter </string> \n   <key> settings </key> \n   <dict> \n     <key> foreground </key> \n     <string> #565656 </string> \n   </dict>  </dict>  <dict> \n   <key> name </key> \n   <string> GitGutter untracked </string> \n   <key> scope </key> \n   <string> markup.untracked.git_gutter </string> \n   <key> settings </key> \n   <dict> \n     <key> foreground </key> \n     <string> #565656 </string> \n   </dict>  </dict>",
            "title": "Required Color Scheme Entries"
        },
        {
            "location": "/coloring/#supported-color-schemes",
            "text": "Color schemes that already have support for GitGutter include:   Afterglow  Baara Dark  Boxy Theme  Brackets Color Scheme  Cobalt2  Dark Room  Deep Blue See  Desert Night  Flatland  Fox  Grandson of Obsidian  Hitoshi  Monokai Extended  Monokai Pro  Neon Color Scheme  Neon  Oblivion  Perv  Solarized Colour Theme  Spacegray  Specials Board  Tomorrow Theme  Underscore Colour Theme  Wildlife  Contact me if you want your color scheme listed here. Or do a pull request.",
            "title": "Supported Color Schemes"
        },
        {
            "location": "/troubleshooting/",
            "text": "Troubleshooting\n\n\nIs git working?\n\n\nThe most common reasons for the icons to not show up are:\n\n\n\n\nGitGutter can't find the \ngit\n executable on \nPATH\n.\n\n\nOn Mac OS the \"Xcode/iOS license\" needs to be agreed to make git work.\n\n\n\n\nTo check, whether git is found and working properly \u2026\n\n\n\n\nOpen the command palette via \nMain > Tools > Command Palettee \u2026\n or key binding \nCtrl + Shift + P\n for Windows/Linux or \n\u2318 + \u21e7 + P\n for Mac OS\n\n\nSearch for \nGitGutter: Support Info\n and hit \nEnter\n.\n\n\n\n\nA dialog is displayed with version information of Sublime Text and all packages being used by GitGutter.\n\n\nIf git was found on \nPATH\n and is working properly, the dialog contains a line like \ngit version 2.10.0.windows.1\n. Otherwise some more detailed information about the reason for git not to work may be found in the console window, then. If not try again with \n\"debug\": true\n added to the GitGutter settings.\n\n\nGit works in shell but is not found by GitGutter!\n\n\nSome operating systems (especially Mac OS) may not run Sublime Text within the login shell. As a result Sublime Text and all its packages don't have access to some of the user's environment variables including the \nPATH\n to git.\n\n\nIn some cases the package providing git, simply required some user confirmation due to license changes and thus simply refuses to run git.\n\n\nWith \nSublimeFixMacPath\n package Sublime Text loads the PATH environment from the login shell. If git is working there, it will be found by GitGutter, too, then.\n\n\nGitGutter can work with a certain binary, too. Please read the section on the \ngit_binary\n setting.\n\n\nGitGutter no longer works after upgrade\n\n\nPlease check if GitGutter works after restarting Sublime Text.\n\n\nAll modules of GitGutter were moved to \nmodules\n sub directory to present them to Sublime Text as one package to avoid creating multiple instances of some modules and objects and reduce package loading time by about 50%.\n\n\nGitGutter handles Package Control's \npost_upgrade\n event to reload all its submodules once after upgrading. In rare cases some modules might not be recovered properly and thus require a restart of ST to make GitGutter work again.\n\n\nGitGutter keeps completely quiet\n\n\nGitGutter is installed and loads properly without any error messages printed to Sublime Text's console, but keeps completely disabled in some or all repositories. Neither gutter icons nor messages are displayed in the status bar.\n\n\nGitGutter is designed to keep quiet in the following situations when evaluation is expected useless:\n\n\n\n\ndisabled in \nPreferences.sublime-settings\n, project settings or view settings (\n\"git_gutter_enabled\": false\n)\n\n\nthe current view\n\n\nshows a file which is not part of a git working tree\n\n\nis not attached to a window\n\n\nis read only\n\n\nis a scratch view\n\n\nis a widget (\n\"is_widget\": true\n)\n\n\nis a REPL view (\n\"repl\": true\n)\n\n\nhas \"Hexadecimal\" encoding\n\n\n\n\nPlease check if one of those states was applied to your view by one of your packages.\n\n\n\n\ndebug\n\n\nWith \n\"debug\": true\n the reason for GitGutter to keep quite is printed to console.\n\n\n\n\n\n\nknown issues\n\n\nConvertToUTF8\n package is known to mark views as scratch during conversion without reverting that state reliably.\n\n\n\n\nGitGutter doesn't recognize working tree\n\n\ngit 2.5+ allows configurations with .git directory not being located in the working tree root. You may also checkout multiple working trees from one repository. No matter which configuration is used, GitGutter expects a \n.git\n directory or a \n.git\n file in the root of a working tree to recognize it as such.\n\n\nIf the \n.git\n directory is not located in the working tree root the following steps are required.\n\n\n\n\nConfigure the repository to point to the custom working tree by calling\n\n\n\n\ngit config --add core.worktree <path_to_worktree>\n\n\nThis step is required to let git use the custom working tree.\n\n\n\n\nCreate a \n.git\n file in the root of the working tree which points to the repository's database.\n\n\n\n\n\u24d8 \nThe \n.git\n file must contain the line \ngitdir: <path_to_git_dir>\n.\n\n\nThe file can be created using the following shell commands.\n\n\nLinux / Mac OS\n\n\necho\n \n\"gitdir: \n$(\ngit rev-parse --git-dir\n)\n\"\n > .git\n\n\n\n\nWindows\n\n\nfor\n /f %i in \n(\n'git rev-parse --git-dir'\n)\n \ndo\n \nset \ngitdir\n=\n%i\n\necho \ngitdir: %gitdir% > .git",
            "title": "Troubleshooting"
        },
        {
            "location": "/troubleshooting/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/troubleshooting/#is-git-working",
            "text": "The most common reasons for the icons to not show up are:   GitGutter can't find the  git  executable on  PATH .  On Mac OS the \"Xcode/iOS license\" needs to be agreed to make git work.   To check, whether git is found and working properly \u2026   Open the command palette via  Main > Tools > Command Palettee \u2026  or key binding  Ctrl + Shift + P  for Windows/Linux or  \u2318 + \u21e7 + P  for Mac OS  Search for  GitGutter: Support Info  and hit  Enter .   A dialog is displayed with version information of Sublime Text and all packages being used by GitGutter.  If git was found on  PATH  and is working properly, the dialog contains a line like  git version 2.10.0.windows.1 . Otherwise some more detailed information about the reason for git not to work may be found in the console window, then. If not try again with  \"debug\": true  added to the GitGutter settings.",
            "title": "Is git working?"
        },
        {
            "location": "/troubleshooting/#git-works-in-shell-but-is-not-found-by-gitgutter",
            "text": "Some operating systems (especially Mac OS) may not run Sublime Text within the login shell. As a result Sublime Text and all its packages don't have access to some of the user's environment variables including the  PATH  to git.  In some cases the package providing git, simply required some user confirmation due to license changes and thus simply refuses to run git.  With  SublimeFixMacPath  package Sublime Text loads the PATH environment from the login shell. If git is working there, it will be found by GitGutter, too, then.  GitGutter can work with a certain binary, too. Please read the section on the  git_binary  setting.",
            "title": "Git works in shell but is not found by GitGutter!"
        },
        {
            "location": "/troubleshooting/#gitgutter-no-longer-works-after-upgrade",
            "text": "Please check if GitGutter works after restarting Sublime Text.  All modules of GitGutter were moved to  modules  sub directory to present them to Sublime Text as one package to avoid creating multiple instances of some modules and objects and reduce package loading time by about 50%.  GitGutter handles Package Control's  post_upgrade  event to reload all its submodules once after upgrading. In rare cases some modules might not be recovered properly and thus require a restart of ST to make GitGutter work again.",
            "title": "GitGutter no longer works after upgrade"
        },
        {
            "location": "/troubleshooting/#gitgutter-keeps-completely-quiet",
            "text": "GitGutter is installed and loads properly without any error messages printed to Sublime Text's console, but keeps completely disabled in some or all repositories. Neither gutter icons nor messages are displayed in the status bar.  GitGutter is designed to keep quiet in the following situations when evaluation is expected useless:   disabled in  Preferences.sublime-settings , project settings or view settings ( \"git_gutter_enabled\": false )  the current view  shows a file which is not part of a git working tree  is not attached to a window  is read only  is a scratch view  is a widget ( \"is_widget\": true )  is a REPL view ( \"repl\": true )  has \"Hexadecimal\" encoding   Please check if one of those states was applied to your view by one of your packages.   debug  With  \"debug\": true  the reason for GitGutter to keep quite is printed to console.    known issues  ConvertToUTF8  package is known to mark views as scratch during conversion without reverting that state reliably.",
            "title": "GitGutter keeps completely quiet"
        },
        {
            "location": "/troubleshooting/#gitgutter-doesnt-recognize-working-tree",
            "text": "git 2.5+ allows configurations with .git directory not being located in the working tree root. You may also checkout multiple working trees from one repository. No matter which configuration is used, GitGutter expects a  .git  directory or a  .git  file in the root of a working tree to recognize it as such.  If the  .git  directory is not located in the working tree root the following steps are required.   Configure the repository to point to the custom working tree by calling   git config --add core.worktree <path_to_worktree>  This step is required to let git use the custom working tree.   Create a  .git  file in the root of the working tree which points to the repository's database.   \u24d8  The  .git  file must contain the line  gitdir: <path_to_git_dir> .  The file can be created using the following shell commands.  Linux / Mac OS  echo   \"gitdir:  $( git rev-parse --git-dir ) \"  > .git  Windows  for  /f %i in  ( 'git rev-parse --git-dir' )   do   set  gitdir = %i echo  gitdir: %gitdir% > .git",
            "title": "GitGutter doesn't recognize working tree"
        },
        {
            "location": "/license/",
            "text": "Released under the MIT license.\n\n\nCopyright \u00a9 2012 - \u2026 John Isaacks & DeathAxe\n\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        }
    ]
}